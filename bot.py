import os
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –∑–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

BOT_TOKEN    = os.getenv("BOT_TOKEN")
ADMIN_CHAT   = int(os.getenv("ADMIN_CHAT_ID", "0"))
PHONE_NUMBER = os.getenv("MANAGER_PHONE", "8-000-000-00-00")

logging.basicConfig(
    format="%(asctime)s %(levelname)s %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def start(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å. –ú—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç —Ä–µ—à–∏–º –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n"
        f"–ò–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ —É–ø—Ä–∞–≤–ª—è—é—â–µ–º—É –ú–∏—Ö–∞–∏–ª—É {PHONE_NUMBER}"
    )
    await update.message.reply_text(text)

async def feedback(update: Update, ctx: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    msg  = update.message.text

    header = (
        f"üì© –ù–æ–≤–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{user.username or user.first_name} "
        f"(ID {user.id}):"
    )
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
    await ctx.bot.send_message(chat_id=ADMIN_CHAT, text=header)
    await ctx.bot.send_message(chat_id=ADMIN_CHAT, text=msg)
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

def main():
    if not BOT_TOKEN or ADMIN_CHAT == 0:
        logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ ADMIN_CHAT_ID")
        return

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, feedback))
    app.run_polling()

if __name__ == "__main__":
    main()
